#!/bin/bash

# read date & ip
snapdate=$1
snapip=$2

# list availableips
availableips='192.168.2.50 192.168.2.51 192.168.2.52 192.168.2.53 192.168.2.54 192.168.2.55 192.168.2.56 192.168.2.57 192.168.2.58 192.168.2.59'

# function validate input ip format
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[2]{1}\.[5][0-9]{1,2}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# create replica from snapshot
function create_replica()
{

# create container from snapshot
printf "\nCreate replica from snapshot [1/8]\n"
lxc copy u16pg-replica-L4/$snapdate u16pg-replica-$snapdate

# mount snapshot ##  (~13 MIN!!)
printf "\nMount PG snapshot [2/8]\n"
zfs clone z5z2ssd/pgReplica/pg96-gifts-replica-L4@$snapdate z5z2ssd/pgReplica/$snapdate

# edit container config
printf "\nEdit container config [3/8]\n"
lxc config device set u16pg-replica-$snapdate pgdata source /z5z2ssd/pgReplica/$snapdate/pgdata/postgresql/9.6/main

# edit container ip
printf "\nEdit container IP [4/8]\n"
zfs mount z5z2ssd/lxd/containers/u16pg-replica-$snapdate

cat > /var/lib/lxd/storage-pools/ssd/containers/u16pg-replica-$snapdate/rootfs/etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address $snapip
    netmask 255.255.255.0
    gateway 192.168.2.3
    dns-nameservers 192.168.0.6

EOF

# edit postgres hba file
printf "\nEdit postgres pg_hba.conf [5/8]\n"

cat > /var/lib/lxd/storage-pools/ssd/containers/u16pg-replica-$snapdate/rootfs/etc/postgresql/9.6/main/pg_hba.conf <<EOF
local   all       root         ident
local   all       postgres     ident
local   all       all          md5

host    all       all      127.0.0.1/32          md5

host    all   postgres    192.168.0.51/32           trust
host    all   postgres    192.168.0.53/32           trust
host    all   postgres    192.168.0.55/32           trust
host    all   postgres    192.168.0.56/32           trust
host    all   postgres    192.168.0.57/32           trust
host    all   postgres    192.168.0.58/32           trust

host    all   all               192.168.0.0/24           md5
EOF

# edit postgresql config
printf "\nEdit postgresql config  [6/8]\n"
cat > /var/lib/lxd/storage-pools/ssd/containers/u16pg-replica-$snapdate/rootfs/etc/postgresql/9.6/main/postgresql.conf <<EOF
## slave
hot_standby = on
wal_level = hot_standby

#master
#max_wal_senders = 2

hot_standby_feedback = on
#wal_level = hot_standby
max_wal_senders = 2
wal_keep_segments = 1024
#checkpoint_segments = 24        #default = 3
checkpoint_timeout = 420        #default = 300 (5 min)

huge_pages = try

max_standby_archive_delay = 1500000
max_standby_streaming_delay = 1500000
#------------------------------------------------------------------------------
# REPLICATION
#------------------------------------------------------------------------------
#archive_mode = on
#archive_command = 'cp -i %p /srv/postgresql/9.6/wal/%f < /dev/null'
#archive_command = 'test ! -f /srv/postgresql/9.6/wal || cp -i %p /srv/postgresql/9.6/wal/%f < /dev/null'

#data_directory = '/srv/postgresql/9.6/main'
data_directory = '/postgresql'
#data_directory = '/var/lib/postgresql/9.6/main'
hba_file = '/etc/postgresql/9.6/main/pg_hba.conf'
ident_file = '/etc/postgresql/9.6/main/pg_ident.conf'
external_pid_file = '/var/run/postgresql/9.6-main.pid'

listen_addresses = 'localhost,$snapip'
port = 5432
max_connections = 120
unix_socket_directories = '/var/run/postgresql' # comma-separated list of directories
ssl = false                              # (change requires restart)

ssl_cert_file = '/etc/ssl/certs/ssl-cert-snakeoil.pem'          # (change requires restart)
ssl_key_file = '/etc/ssl/private/ssl-cert-snakeoil.key'         # (change requires restart)

cursor_tuple_fraction = 1.0

#--------------------------------------------------------------------------
# - Memory -

shared_buffers = 32GB                   # min 128kB
work_mem = 256MB                         # min 64kB
maintenance_work_mem = 1GB              # min 1MB
effective_cache_size = 4GB

#log_connections = on
#log_disconnections = on

log_min_duration_statement = 300
log_min_messages = notice
log_temp_files = -1
log_line_prefix = '%t %d %p %u '
track_functions = all                   # none, pl, all

update_process_title = on

bytea_output = 'escape'

datestyle = 'iso, dmy'
log_timezone = 'Europe/Moscow'
timezone = 'Europe/Moscow'

lc_messages = 'en_US.UTF-8'                     # locale for system error message
lc_monetary = 'en_US.UTF-8'                     # locale for monetary formatting
lc_numeric = 'en_US.UTF-8'                      # locale for number formatting
lc_time = 'en_US.UTF-8'                         # locale for time formatting

# default configuration for text search
default_text_search_config = 'pg_catalog.english'

#------------------------------------------------------------------------------
# CUSTOMIZED OPTIONS
#------------------------------------------------------------------------------
shared_preload_libraries = 'pg_stat_statements,pg_stat_kcache'
user_session.access_level = 0
EOF

printf "\nRemove recovery.conf [7/8]\n"
rm -f /z5z2ssd/pgReplica/$snapdate/pgdata/postgresql/9.6/main/recovery.conf

# start container 
printf "\nStart container [8/8]\n"
lxc start u16pg-replica-$snapdate
}

# print List of available ip
function print_ip()
{
printf "List of available IP:\n";
for availableip in $availableips
do
  if ping -c1 -w1 $availableip >/dev/null 2>&1
    then
      echo "$availableip already allocated" >&2
    else
      echo "$availableip available" >&2
  fi
done
}

# print List of available Dates
function print_dates()
{
printf "\nList of available database snapshot dates:\n";
zfs list -t snap  | grep z5z2ssd/pgReplica/pg96-gifts-replica-L4 | awk '{print $1}' | sort  | cut -d @ -f 2;
printf "\n";
printf "List already used PG snapshots:\n"
#lxc list --fast | grep RUNNING | grep u16pg-replica-h | awk -F '[|.]' '{print $2}' | cut -c16-
lxc list --fast | grep RUNNING | grep u16pg-replica- | awk -F '[|.]' '{print $2}' | grep 2019 | cut -c16-
printf "\n";
printf "Usage: $0 {hourly\daily}-{DATE} {IP}\n";
printf "Example: $0 hourly-2019-01-11-15-00 192.168.2.53\n";
}

# check date format
function check_date()
{
if [[ $snapdate =~ daily-|hourly-[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}$ ]]
  then
    true;
  else
    printf "\nDate $1 is in an invalid format (not word-YYYY-MM-DD-HH-MM)\n";
    exit 1;
fi
}

# check ip in list of availableips
function check_ipinlist()
{
if [[ $availableips =~ $snapip ]];
  if [ $snapip == "192.168.2.5" ];
    then
      printf "Unavailable ip address: $snapip \n";
    exit;
  fi
  then true;
  else
    printf "Unavailable ip address: $snapip \n";
    exit;
fi
}

# check for already taken up ip
function check_taken_ip()
{
if ping -c1 -w1 $snapip >/dev/null 2>&1
  then
    echo "This ip $snapip already taken! Please choose another from list of available ips:" >&2
    print_ip;
    exit 1;
  else
    true;
fi
}

# check for already taken up date
function check_taken_date()
{
#usedsnaps=`lxc list --fast | grep RUNNING | grep u16pg-replica- | awk -F '[|.]' '{print $2}' | cut -c16-`
usedsnaps=`lxc list --fast | grep RUNNING | grep u16pg-replica- | awk -F '[|.]' '{print $2}' | grep 2019 | cut -c16-`
if [[ $usedsnaps =~ $snapdate ]];
 then
   printf "\nThis date already taken: $snapdate \nPlease choose another from list of available dates!\n";
   #print_dates;
   exit;
fi
}



###############################################################################################
# default action
[ $# -eq 0 ] && {
print_ip;
print_dates;
exit 1;
}

check_ipinlist;
check_date;
check_taken_date;

# check ip address
check_taken_ip;
if  valid_ip $snapip
  # if IP address is good
  then stat='good';

  create_replica;

  # if IP address bad
  else stat='bad';
    printf "Wrong ip address: $snapip \n";
fi
