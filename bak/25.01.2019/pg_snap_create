#!/bin/bash

# read date & ip
snapdate=$1
snapip=$2

# list availableips
availableips='192.168.2.50 192.168.2.51 192.168.2.52 192.168.2.53 192.168.2.54 192.168.2.55 192.168.2.56 192.168.2.57 192.168.2.58 192.168.2.59'

# function validate input ip format
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[2]{1}\.[5][0-9]{1,2}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# create replica from snapshot
function create_replica()
{

# create container from snapshot
printf "\nCreate replica from snapshot [1/8]\n"
lxc copy u16pg-replica-L4/$snapdate u16pg-replica-$snapdate

# mount snapshot ##  (~13 MIN!!)
printf "\nMount PG snapshot [2/8]\n"
zfs clone z5z2ssd/pgReplica/pg96-gifts-replica-L4@$snapdate z5z2ssd/pgReplica/$snapdate

# edit container config
printf "\nEdit container config [3/8]\n"
lxc config device set u16pg-replica-$snapdate pgdata source /z5z2ssd/pgReplica/$snapdate/pgdata/postgresql/9.6/main

# edit container ip
printf "\nEdit container IP [4/8]\n"
zfs mount z5z2ssd/lxd/containers/u16pg-replica-$snapdate

sed  's/$snapip/'$snapip'/' /z6z2/scripts/pg_snap/conf/ifconfig > /var/lib/lxd/storage-pools/ssd/containers/u16pg-replica-$snapdate/rootfs/etc/network/interfaces

# edit postgres hba file
printf "\nEdit postgres pg_hba.conf [5/8]\n"
cat /z6z2/scripts/pg_snap/conf/pg_hba.conf >  /var/lib/lxd/storage-pools/ssd/containers/u16pg-replica-$snapdate/rootfs/etc/postgresql/9.6/main/pg_hba.conf

# edit postgresql config
printf "\nEdit postgresql config  [6/8]\n"
sed  's/$snapip/'$snapip'/' /z6z2/scripts/pg_snap/conf/postgresql.conf > /var/lib/lxd/storage-pools/ssd/containers/u16pg-replica-$snapdate/rootfs/etc/postgresql/9.6/main/postgresql.conf

printf "\nRemove recovery.conf [7/8]\n"
rm -f /z5z2ssd/pgReplica/$snapdate/pgdata/postgresql/9.6/main/recovery.conf

# start container 
printf "\nStart container [8/8]\n"
lxc start u16pg-replica-$snapdate
}

# print List of available ip
function print_ip()
{
printf "List of available IP:\n";
for availableip in $availableips
do
  if ping -c1 -w1 $availableip >/dev/null 2>&1
    then
      echo "$availableip already allocated" >&2
    else
      echo "$availableip available" >&2
  fi
done
}

# print List of available Dates
function print_dates()
{
printf "\nList of available database snapshot dates:\n";
zfs list -t snap  | grep z5z2ssd/pgReplica/pg96-gifts-replica-L4 | awk '{print $1}' | sort  | cut -d @ -f 2;
printf "\n";
printf "List already used PG snapshots:\n"
#lxc list --fast | grep RUNNING | grep u16pg-replica-h | awk -F '[|.]' '{print $2}' | cut -c16-
lxc list --fast | grep RUNNING | grep u16pg-replica- | awk -F '[|.]' '{print $2}' | grep 2019 | cut -c16-
printf "\n";
printf "Usage: $0 {hourly\daily}-{DATE} {IP}\n";
printf "Example: $0 hourly-2019-01-11-15-00 192.168.2.53\n";
}

# check date format
function check_date()
{
if [[ $snapdate =~ daily-|hourly-[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}$ ]]
  then
    true;
  else
    printf "\nDate $1 is in an invalid format (not word-YYYY-MM-DD-HH-MM)\n";
    exit 1;
fi
}

# check ip in list of availableips
function check_ipinlist()
{
if [[ $availableips =~ $snapip ]];
  if [ $snapip == "192.168.2.5" ];
    then
      printf "Unavailable ip address: $snapip \n";
    exit;
  fi
  then true;
  else
    printf "Unavailable ip address: $snapip \n";
    exit;
fi
}

# check for already taken up ip
function check_taken_ip()
{
if ping -c1 -w1 $snapip >/dev/null 2>&1
  then
    echo "This ip $snapip already taken! Please choose another from list of available ips:" >&2
    print_ip;
    exit 1;
  else
    true;
fi
}

# check for already taken up date
function check_taken_date()
{
#usedsnaps=`lxc list --fast | grep RUNNING | grep u16pg-replica- | awk -F '[|.]' '{print $2}' | cut -c16-`
usedsnaps=`lxc list --fast | grep RUNNING | grep u16pg-replica- | awk -F '[|.]' '{print $2}' | grep 2019 | cut -c16-`
if [[ $usedsnaps =~ $snapdate ]];
 then
   printf "\nThis date already taken: $snapdate \nPlease choose another from list of available dates!\n";
   #print_dates;
   exit;
fi
}



###############################################################################################
# default action
[ $# -eq 0 ] && {
print_ip;
print_dates;
exit 1;
}

check_ipinlist;
check_date;
check_taken_date;

# check ip address
check_taken_ip;
if  valid_ip $snapip
  # if IP address is good
  then stat='good';

  create_replica;

  # if IP address bad
  else stat='bad';
    printf "Wrong ip address: $snapip \n";
fi
